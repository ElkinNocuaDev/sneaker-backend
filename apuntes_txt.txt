


mongo "mongodb://drenvio:moM5f3AodwLE5d0A@ac-aemgtkt-shard-00-00.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-01.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-02.unqyghm.mongodb.net:27017/?replicaSet=atlas-y8oxsk-shard-0&ssl=true&authSource=admin"

mongo "mongodb+srv://drenvio:moM5f3AodwLE5d0A@ac-aemgtkt-shard-00-00.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-01.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-02.unqyghm.mongodb.net:27017/?replicaSet=atlas-y8oxsk-shard-0&ssl=true&authSource=admin"



User: drenvio
Password: moM5f3AodwLE5d0A

mongodb://drenvio:moM5f3AodwLE5d0A@ac-aemgtkt-shard-00-00.unqyghm.mongodb.net:270
17,ac-aemgtkt-shard-00-01.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-02.
unqyghm.mongodb.net:27017/?replicaSet=atlas-y8oxsk-shard-0&ssl=true&authSou
rce=admin



mongodb://drenvio:moM5f3AodwLE5d0A@ac-aemgtkt-shard-00-00.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-01.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-02.unqyghm.mongodb.net:27017/?replicaSet=atlas-y8oxsk-shard-0&ssl=true&authSource=admin

MONGO_URI=mongodb://drenvio:moM5f3AodwLE5d0A@ac-aemgtkt-shard-00-00.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-01.unqyghm.mongodb.net:27017,ac-aemgtkt-shard-00-02.unqyghm.mongodb.net:27017/?replicaSet=atlas-y8oxsk-shard-0&ssl=true&authSource=admin



exports.getProducts = async (req, res) => {
  try {
    const products = await Product.find({ inStock: true });
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener productos' });
  }
};




const Product = require('../models/Product');

// Obtener productos en stock
exports.getProducts = async (req, res) => {
  try {
    const products = await Product.find({ inStock: true });
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener productos' });
  }
};


// Obtener precio especial de un producto para un usuario
exports.getPrice = async (req, res) => {
  const { user_id, nombre_producto } = req.params;
  try {
    const product = await Product.findOne({ name: nombre_producto });
    if (!product) {
      return res.status(404).json({ error: 'Producto no encontrado' });
    }

    let price = product.basePrice;

    // Verificar si hay descuento especial para la marca
    if (user_id in product.specialPrices && product.specialPrices[user_id][product.brand]) {
      price = product.specialPrices[user_id][product.brand];
    }

    res.json({ price });
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener el precio' });
  }
};






// Obtener precio especial de un producto para un usuario
exports.getPrice = async (req, res) => {
  const { user_id, nombre_producto } = req.params;
  try {
    const product = await Product.findOne({ name: nombre_producto });
    if (!product) {
      return res.status(404).json({ error: 'Producto no encontrado' });
    }

    let price = product.basePrice;

    // Verificar si el cliente tiene un precio especial para la marca
    const specialPrices = product.specialPrices.get(user_id);
    if (specialPrices && specialPrices[product.brand] !== undefined) {
      price = specialPrices[product.brand];
    }

    res.json({ price });
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener el precio' });
  }
};
